import os
import base64
import json
import pandas as pd
import networkx as nx
import plotly.graph_objects as go
from dash import Dash, dcc, html, Input, Output, State
import dash_bootstrap_components as dbc
from collections import Counter
import tempfile
import re
import sqlite3
import time  # ← 이 줄 추가
from datetime import datetime

# PDF 처리 라이브러리 (선택적)
try:
    from pdfminer.high_level import extract_text
    PDF_AVAILABLE = True
except ImportError:
    print("PDFMiner not available - using mock text extraction")
    PDF_AVAILABLE = False

# DuckDB 지원 (선택적)
try:
    import duckdb
    DUCKDB_AVAILABLE = True
except ImportError:
    print("DuckDB not available - using SQLite instead")
    DUCKDB_AVAILABLE = False

# 데이터베이스 관리 클래스
class DatabaseManager:
    def __init__(self, db_path="knowledge_graph.db"):
        self.db_path = db_path
        self.use_duckdb = DUCKDB_AVAILABLE
        self.init_database()
    
    def get_connection(self):
        """데이터베이스 연결 반환"""
        if self.use_duckdb:
            return duckdb.connect(self.db_path.replace('.db', '.duckdb'))
        else:
            return sqlite3.connect(self.db_path)
    
    def init_database(self):
        """데이터베이스 테이블 초기화"""
        try:
            conn = self.get_connection()
            
            # 문서 테이블
            if self.use_duckdb:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS documents (
                        id INTEGER PRIMARY KEY,
                        filename TEXT NOT NULL,
                        upload_time TEXT NOT NULL,
                        content_length INTEGER,
                        processing_time REAL,
                        text_preview TEXT
                    );
                """)
            else:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS documents (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        filename TEXT NOT NULL,
                        upload_time TEXT NOT NULL,
                        content_length INTEGER,
                        processing_time REAL,
                        text_preview TEXT
                    );
                """)
            
            # 노드 테이블
            if self.use_duckdb:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS nodes (
                        id TEXT PRIMARY KEY,
                        document_id INTEGER,
                        node_type TEXT,
                        ontology_class TEXT,
                        confidence REAL,
                        predicted_class INTEGER,
                        creation_time TEXT,
                        FOREIGN KEY (document_id) REFERENCES documents (id)
                    );
                """)
            else:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS nodes (
                        id TEXT PRIMARY KEY,
                        document_id INTEGER,
                        node_type TEXT,
                        ontology_class TEXT,
                        confidence REAL,
                        predicted_class INTEGER,
                        creation_time TEXT,
                        FOREIGN KEY (document_id) REFERENCES documents (id)
                    );
                """)
            
            # 엣지 테이블
            if self.use_duckdb:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS edges (
                        id INTEGER PRIMARY KEY,
                        document_id INTEGER,
                        source_node TEXT,
                        target_node TEXT,
                        relation_type TEXT,
                        confidence REAL,
                        creation_time TEXT,
                        FOREIGN KEY (document_id) REFERENCES documents (id)
                    );
                """)
            else:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS edges (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        document_id INTEGER,
                        source_node TEXT,
                        target_node TEXT,
                        relation_type TEXT,
                        confidence REAL,
                        creation_time TEXT,
                        FOREIGN KEY (document_id) REFERENCES documents (id)
                    );
                """)
            
            # 온톨로지 패턴 테이블
            if self.use_duckdb:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS ontology_patterns (
                        id INTEGER PRIMARY KEY,
                        pattern_type TEXT,
                        pattern_value TEXT,
                        frequency INTEGER,
                        confidence_avg REAL,
                        last_seen TEXT,
                        document_count INTEGER
                    );
                """)
            else:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS ontology_patterns (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        pattern_type TEXT,
                        pattern_value TEXT,
                        frequency INTEGER,
                        confidence_avg REAL,
                        last_seen TEXT,
                        document_count INTEGER
                    );
                """)
            
            # 도메인 인사이트 테이블
            if self.use_duckdb:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS domain_insights (
                        id INTEGER PRIMARY KEY,
                        document_id INTEGER,
                        document_type TEXT,
                        industry_domain TEXT,
                        complexity_score REAL,
                        technical_density REAL,
                        creation_time TEXT,
                        FOREIGN KEY (document_id) REFERENCES documents (id)
                    );
                """)
            else:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS domain_insights (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        document_id INTEGER,
                        document_type TEXT,
                        industry_domain TEXT,
                        complexity_score REAL,
                        technical_density REAL,
                        creation_time TEXT,
                        FOREIGN KEY (document_id) REFERENCES documents (id)
                    );
                """)
            
            if self.use_duckdb:
                conn.commit()
            else:
                conn.commit()
            
            conn.close()
            print(f"✅ Database initialized: {'DuckDB' if self.use_duckdb else 'SQLite'}")
            
        except Exception as e:
            print(f"❌ Database initialization error: {e}")
    
    def save_processing_results(self, filename, text_content, graph_data, learning_results, processing_time=0):
        """처리 결과를 데이터베이스에 저장"""
        try:
            conn = self.get_connection()
            current_time = datetime.now().isoformat()
            
            # 1. 문서 정보 저장
            text_preview = text_content[:500] if text_content else ""
            
            if self.use_duckdb:
                # DuckDB: 수동 ID 할당
                doc_count = conn.execute("SELECT COUNT(*) FROM documents").fetchone()[0]
                doc_id = doc_count + 1
                
                conn.execute("""
                    INSERT INTO documents (id, filename, upload_time, content_length, processing_time, text_preview)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, [doc_id, filename, current_time, len(text_content), processing_time, text_preview])
            else:
                # SQLite: AUTO INCREMENT 사용
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO documents (filename, upload_time, content_length, processing_time, text_preview)
                    VALUES (?, ?, ?, ?, ?)
                """, (filename, current_time, len(text_content), processing_time, text_preview))
                doc_id = cursor.lastrowid
            
            # 2. 노드 저장
            nodes = graph_data.get("nodes", [])
            predictions = graph_data.get("predictions", [])
            
            for i, node in enumerate(nodes):
                predicted_class = predictions[i] if i < len(predictions) else 0
                
                if self.use_duckdb:
                    conn.execute("""
                        INSERT INTO nodes (id, document_id, node_type, ontology_class, confidence, predicted_class, creation_time)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    """, [
                        node["id"], doc_id, node.get("type", "unknown"), 
                        node.get("ontology_class", "Unknown"), node.get("confidence", 0.5),
                        predicted_class, current_time
                    ])
                else:
                    conn.execute("""
                        INSERT INTO nodes (id, document_id, node_type, ontology_class, confidence, predicted_class, creation_time)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    """, (
                        node["id"], doc_id, node.get("type", "unknown"), 
                        node.get("ontology_class", "Unknown"), node.get("confidence", 0.5),
                        predicted_class, current_time
                    ))
            
            # 3. 엣지 저장
            edges = graph_data.get("edges", [])
            
            if self.use_duckdb:
                edge_id = 1
                for edge in edges:
                    conn.execute("""
                        INSERT INTO edges (id, document_id, source_node, target_node, relation_type, confidence, creation_time)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    """, [
                        edge_id, doc_id, edge.get("source", ""), edge.get("target", ""),
                        edge.get("relation", "unknown"), 0.8, current_time
                    ])
                    edge_id += 1
            else:
                for edge in edges:
                    conn.execute("""
                        INSERT INTO edges (document_id, source_node, target_node, relation_type, confidence, creation_time)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (
                        doc_id, edge.get("source", ""), edge.get("target", ""),
                        edge.get("relation", "unknown"), 0.8, current_time
                    ))
            
            # 4. 온톨로지 패턴 저장/업데이트
            patterns = learning_results.get("patterns", {})
            confidence_scores = learning_results.get("confidence_scores", {})
            
            pattern_id = 1
            for pattern_type, pattern_list in patterns.items():
                for pattern_value in pattern_list:
                    pattern_str = str(pattern_value)[:200]  # 길이 제한
                    avg_confidence = sum(confidence_scores.values()) / max(len(confidence_scores), 1)
                    
                    if self.use_duckdb:
                        conn.execute("""
                            INSERT INTO ontology_patterns (id, pattern_type, pattern_value, frequency, confidence_avg, last_seen, document_count)
                            VALUES (?, ?, ?, ?, ?, ?, ?)
                        """, [pattern_id, pattern_type, pattern_str, 1, avg_confidence, current_time, 1])
                        pattern_id += 1
                    else:
                        conn.execute("""
                            INSERT INTO ontology_patterns (pattern_type, pattern_value, frequency, confidence_avg, last_seen, document_count)
                            VALUES (?, ?, ?, ?, ?, ?)
                        """, (pattern_type, pattern_str, 1, avg_confidence, current_time, 1))
            
            # 5. 도메인 인사이트 저장
            domain_insights = learning_results.get("domain_insights", {})
            if domain_insights:
                if self.use_duckdb:
                    insight_id = 1
                    conn.execute("""
                        INSERT INTO domain_insights (id, document_id, document_type, industry_domain, complexity_score, technical_density, creation_time)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    """, [
                        insight_id, doc_id, domain_insights.get("document_type", "unknown"),
                        domain_insights.get("industry_domain", "unknown"),
                        domain_insights.get("complexity_score", 0),
                        domain_insights.get("technical_density", 0),
                        current_time
                    ])
                else:
                    conn.execute("""
                        INSERT INTO domain_insights (document_id, document_type, industry_domain, complexity_score, technical_density, creation_time)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (
                        doc_id, domain_insights.get("document_type", "unknown"),
                        domain_insights.get("industry_domain", "unknown"),
                        domain_insights.get("complexity_score", 0),
                        domain_insights.get("technical_density", 0),
                        current_time
                    ))
            
            if self.use_duckdb:
                conn.commit()
            else:
                conn.commit()
            
            conn.close()
            
            print(f"✅ Data saved to database - Document ID: {doc_id}")
            return doc_id
            
        except Exception as e:
            print(f"❌ Database save error: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def execute_query(self, query):
        """SQL 쿼리 실행"""
        try:
            conn = self.get_connection()
            
            if self.use_duckdb:
                result = conn.execute(query).fetch_df()
            else:
                result = pd.read_sql_query(query, conn)
            
            conn.close()
            return result
            
        except Exception as e:
            print(f"❌ Query execution error: {e}")
            return pd.DataFrame()
    
    def get_database_stats(self):
        """데이터베이스 통계 반환"""
        try:
            stats = {}
            
            # 기본 통계
            stats["total_documents"] = self.execute_query("SELECT COUNT(*) as count FROM documents")["count"].iloc[0]
            stats["total_nodes"] = self.execute_query("SELECT COUNT(*) as count FROM nodes")["count"].iloc[0]
            stats["total_edges"] = self.execute_query("SELECT COUNT(*) as count FROM edges")["count"].iloc[0]
            stats["total_patterns"] = self.execute_query("SELECT COUNT(*) as count FROM ontology_patterns")["count"].iloc[0]
            
            # 최근 문서
            recent_docs = self.execute_query("""
                SELECT filename, upload_time, content_length 
                FROM documents 
                ORDER BY upload_time DESC 
                LIMIT 5
            """)
            stats["recent_documents"] = recent_docs.to_dict('records') if not recent_docs.empty else []
            
            # 노드 타입별 분포
            node_distribution = self.execute_query("""
                SELECT node_type, COUNT(*) as count 
                FROM nodes 
                GROUP BY node_type
            """)
            stats["node_distribution"] = node_distribution.to_dict('records') if not node_distribution.empty else []
            
            # 온톨로지 클래스별 분포  
            class_distribution = self.execute_query("""
                SELECT ontology_class, COUNT(*) as count, AVG(confidence) as avg_confidence
                FROM nodes 
                GROUP BY ontology_class 
                ORDER BY count DESC
            """)
            stats["class_distribution"] = class_distribution.to_dict('records') if not class_distribution.empty else []
            
            # 고신뢰도 엔티티 수
            high_confidence_count = self.execute_query("""
                SELECT COUNT(*) as count 
                FROM nodes 
                WHERE confidence > 0.8
            """)["count"].iloc[0]
            stats["high_confidence_entities"] = high_confidence_count
            
            return stats
            
        except Exception as e:
            print(f"❌ Database stats error: {e}")
            return {}
        
def extract_pdf_text(pdf_path):
    """PDF에서 텍스트 추출 - 디버깅 강화"""
    if PDF_AVAILABLE:
        try:
            text = extract_text(pdf_path)
            
            # 🔍 디버깅: 실제 추출된 텍스트 확인
            print("🔍 PDF TEXT DEBUG:")
            print("="*50)
            print(text[:1000])  # 첫 1000자만 출력
            print("="*50)
            
            # 🔍 특정 키워드 검색
            keywords = ["14", "2012", "HJL", "SKL", "REVISION", "DATE", "BY"]
            print("🔍 KEYWORD SEARCH:")
            for keyword in keywords:
                if keyword in text:
                    print(f"   ✅ Found: {keyword}")
                    # 해당 키워드 주변 텍스트 보기
                    idx = text.find(keyword)
                    context = text[max(0, idx-30):idx+50]
                    print(f"      Context: {repr(context)}")
                else:
                    print(f"   ❌ Missing: {keyword}")
            print("="*50)
            
            return text
        except Exception as e:
            print(f"PDF extraction error: {e}")
            return "Error extracting PDF text"
    else:
        # Mock 텍스트 반환
        return """Industrial Equipment Specification
        Project: 7T04 - Centrifugal Pump Process Data
        Equipment ID: P-2105 A/B
        Pump Type: CENTRIFUGAL
        Driver Type: MOTOR / MOTOR
        Capacity: 71.1 m3/h (AM Feed)
        Temperature: 384 ℃
        Pressure: 17.1 kg/cm2A
        Viscosity: 1.0 cP
        Revision: 14
        Checked by: HJL / SKL
        Date: 2012-12-26"""

# 온톨로지 클래스 (대폭 강화된 버전)
# 온톨로지 클래스 (완전 개선된 버전)
class AdvancedOntologyLearner:
    def __init__(self):
        # 기본 온톨로지 스키마
        self.classes = {"Project", "Equipment", "ProcessRequirement", "Person", "Document", "Revision", "Note", "Field", "Date"}
        self.object_properties = {"hasEquipment", "hasProcessReq", "reviewedBy", "hasProject", "hasValue", "hasRevision", "hasNote", "hasField"}
        self.datatype_properties = {"jobNo", "itemNo", "value", "noteText", "revisionNumber", "revisionDate", "fieldName", "fieldValue"}
        
        # 학습된 패턴 저장소
        self.learned_patterns = {}
        self.entity_instances = {}
        self.confidence_scores = {}
        
        # 확장된 도메인 특화 키워드
        self.domain_keywords = {
            "Project": ["job", "project", "doc", "document", "specification", "drawing", "client", "location"],
            "Equipment": ["pump", "motor", "driver", "centrifugal", "equipment", "vessel", "tank", "compressor", "exchanger"],
            "ProcessRequirement": ["temperature", "pressure", "capacity", "flow", "viscosity", "density", "npsh", "head", "suction", "discharge"],
            "Person": ["checked", "reviewed", "approved", "by", "engineer", "manager"],
            "Revision": ["revision", "rev", "version", "updated", "modified"],
            "Note": ["note", "remark", "comment", "description", "notes"],
            "Field": ["type", "required", "operating", "duty", "liquid", "vapor", "specific", "differential", "material", "method"],
            "Date": ["date", "time", "year", "month", "day"]
        }
        
        # 확장된 단위 및 측정값 패턴
        self.unit_patterns = {
            "temperature": ["℃", "°C", "°F", "K", "DEG C"],
            "pressure": ["kg/cm2", "kg/cm2g", "kg/cm2A", "bar", "psi", "Pa", "kPa", "MPa"],
            "flow": ["m3/h", "m3/hr", "M3/HR", "l/min", "gpm", "bph"],
            "viscosity": ["cP", "Pa·s", "cSt"],
            "length": ["mm", "cm", "m", "in", "ft", "METER"],
            "percentage": ["%", "wt%", "WT%"],
            "density": ["KG/M3", "kg/m3"],
            "time": ["hr", "yr", "hour", "year"]
        }
        
        # 화학공정 전문용어
        self.process_terms = {
            "fluids": ["OVERFLASH", "GAS OIL", "AH FEED", "AM FEED", "SULFUR"],
            "materials": ["API CLASS", "FLAMMABLE", "TOXIC", "H2S", "CHLORIDE"],
            "operations": ["CONTINUOUS", "INTERMITTENT", "MANUAL", "AUTOMATIC", "INDOOR", "OUTDOOR"],
            "equipment_types": ["HORIZONTAL", "CENTRIFUGAL", "STEAM TRACING", "STEAM JACKET", "INSULATION"]
        }
        
    def learn_from_text(self, text):
        print("🧠 Advanced ontology learning from text...")
        
        # 1. 기본 패턴 추출 (대폭 강화)
        basic_patterns = self._extract_basic_patterns(text)
        
        # 2. 필드-값 쌍 추출
        field_value_pairs = self._extract_field_value_pairs(text)
        
        # 3. NOTE 섹션 추출  
        notes = self._extract_notes_section(text)
        
        # 4. 컨텍스트 기반 엔티티 인식
        contextual_entities = self._extract_contextual_entities(text)
        
        # 5. 관계 추출
        relations = self._extract_relations(text, contextual_entities)
        
        # 6. 신뢰도 계산
        confidence_scores = self._calculate_confidence(basic_patterns, contextual_entities)
        
        # 7. 온톨로지 매칭
        ontology_matches = self._match_to_ontology(contextual_entities)
        
        # 8. 학습 결과 저장
        self._update_learned_knowledge(basic_patterns, contextual_entities, relations)
        
        # 통합 결과
        results = {
            "patterns": basic_patterns,
            "field_value_pairs": field_value_pairs,
            "notes": notes,
            "new_entities": contextual_entities,
            "new_relations": relations,
            "matched_entities": ontology_matches,
            "confidence_scores": confidence_scores,
            "domain_insights": self._generate_domain_insights(text)
        }
        
        # 총 엔티티 수 계산
        total_entities = (
            sum(len(v) if isinstance(v, list) else 1 for v in basic_patterns.values()) +
            len(field_value_pairs) +
            len(notes) +
            sum(len(v) for v in contextual_entities.values())
        )
        
        print(f"📊 Enhanced learning completed:")
        print(f"   - Basic Patterns: {len(basic_patterns)} types")
        print(f"   - Field-Value Pairs: {len(field_value_pairs)}")
        print(f"   - Notes: {len(notes)}")
        print(f"   - Contextual Entities: {sum(len(v) for v in contextual_entities.values())}")
        print(f"   - Total Entities: {total_entities}")
        print(f"   - Relations: {len(relations)} identified")
        print(f"   - Avg Confidence: {sum(confidence_scores.values())/len(confidence_scores) if confidence_scores else 0:.2f}")
        
        return results
    
    def _extract_basic_patterns(self, text):
        """기본 패턴 추출 - 완전 개선된 버전"""
        patterns = {}
        
        try:
            # 1. 프로젝트/문서 번호 패턴 (확장)
            project_patterns = [
                r'(?:JOB\s*NO\.?\s*:?\s*)([A-Z0-9]{2,}(?:-[A-Z0-9]+)*)',
                r'(?:PROJECT\s*:?\s*)([A-Z0-9]{2,}(?:\s+[A-Z0-9]+)*)',
                r'(?:DOC\.?\s*NO\.?\s*:?\s*)([A-Z0-9]{2,}(?:-[A-Z0-9]+)*)',
                r'(?:ITEM\s*NO\.?\s*:?\s*)([A-Z0-9]{2,}(?:-[A-Z0-9]+)*)',
                r'\b([A-Z]\d+[A-Z]?\d*(?:-[A-Z0-9]+)*)\b'
            ]
            
            project_ids = []
            for pattern in project_patterns:
                matches = re.findall(pattern, text, re.IGNORECASE)
                project_ids.extend(matches)
            
            if project_ids:
                patterns["project_ids"] = list(set(project_ids))
            
            # 2. 모든 리비전 번호 추출 (일반화)
            revision_patterns = [
                r'(?:REVISION|REV\.?|REV)\s*:?\s*(\d+[A-Z]?)',
                r'(?:revision|rev)\s+(\d+[A-Z]?)',
                r'\bR(\d+[A-Z]?)\b',
                r'\bRev\s*(\d+[A-Z]?)\b',
                # 테이블에서 연속된 리비전 번호들
                r'(?:REVISION\s+DATE\s+)(?:\d+[A-Z]?\s+)*(\d+[A-Z]?)(?=\s+(?:20\d{2}|BY))',
                # 개별 리비전 번호
                r'\b(1[0-9][A-Z]?)\b',  # 10-19
                r'\b([2-9]\d[A-Z]?)\b'   # 20+
            ]
            
            revision_numbers = []
            for pattern in revision_patterns:
                matches = re.findall(pattern, text, re.IGNORECASE)
                revision_numbers.extend(matches)
            
            if revision_numbers:
                patterns["revision_numbers"] = list(set(revision_numbers))
            
            # 3. 모든 날짜 패턴 추출 (완전 일반화)
            date_patterns = [
                r'(\d{4}-\d{1,2}-\d{1,2})',  # YYYY-MM-DD
                r'(\d{1,2}/\d{1,2}/\d{4})',  # MM/DD/YYYY
                r'(\d{1,2}-\d{1,2}-\d{4})',  # MM-DD-YYYY
                r'(20\d{2}-\d{1,2}-\d{1,2})', # 20XX-XX-XX 확실한 형태
            ]
            
            dates = []
            for pattern in date_patterns:
                matches = re.findall(pattern, text)
                dates.extend(matches)
            
            if dates:
                patterns["dates"] = list(set(dates))
            
            # 4. 모든 사람 이름/이니셜 추출 (완전 일반화)
            person_patterns = [
                r'(?:BY/CHECKED|BY CHECKED|Checked\s+by|Reviewed\s+by|Approved\s+by)\s*:?\s*([A-Z]{2,4}(?:\s*/\s*[A-Z]{2,4})*)',
                r'\b([A-Z]{2,4})\s*/\s*([A-Z]{2,4})\b',  # XXX / YYY 형태
                r'\b([A-Z]{3})\s+/\s+([A-Z]{3})\b',     # XXX / YYY (공백 포함)
            ]
            
            person_names = []
            for pattern in person_patterns:
                matches = re.findall(pattern, text)
                for match in matches:
                    if isinstance(match, tuple):
                        person_names.extend([m for m in match if m and len(m) >= 2])
                    else:
                        names = re.split(r'\s*/\s*', match)
                        person_names.extend([n.strip() for n in names if n.strip() and len(n.strip()) >= 2])
            
            if person_names:
                patterns["person_names"] = list(set(person_names))
            
            # 5. 장비 식별자 패턴 (확장)
            equipment_patterns = [
                r'([A-Z]-\d+(?:\s*[A-Z](?:/[A-Z])?)?)',
                r'([A-Z]{2,3}-\d+)',
                r'([A-Z]\d{3,}[A-Z]?)',
                r'(P-\d+\s*[A-Z]?/?[A-Z]?)',  # P-2105 A/B 형태
            ]
            
            equipment_ids = []
            for pattern in equipment_patterns:
                matches = re.findall(pattern, text)
                equipment_ids.extend(matches)
            
            if equipment_ids:
                patterns["equipment_ids"] = list(set(equipment_ids))
            
            # 6. 모든 수치 값 패턴 (대폭 확장)
            numerical_patterns = []
            for unit_type, units in self.unit_patterns.items():
                for unit in units:
                    pattern = rf'(\d+\.?\d*)\s*{re.escape(unit)}'
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    for match in matches:
                        numerical_patterns.append((match, unit, unit_type))
            
            # 단위 없는 숫자들도 추출 (컨텍스트 기반)
            standalone_numbers = re.findall(r'\b(\d+\.?\d+)\b', text)
            for num in standalone_numbers:
                if float(num) > 1:  # 의미있는 숫자만
                    numerical_patterns.append((num, "", "number"))
            
            if numerical_patterns:
                patterns["numerical_values"] = numerical_patterns
            
            # 7. 화학공정 전문용어 추출
            process_entities = []
            for category, terms in self.process_terms.items():
                for term in terms:
                    if term in text:
                        process_entities.append((term, category))
            
            if process_entities:
                patterns["process_terms"] = process_entities
            
            # 8. API 분류 및 재료 등급
            material_patterns = [
                r'(API\s+CLASS\s+[A-Z]-\d+)',
                r'(API\s+[A-Z]-\d+)',
                r'([A-Z]\s*-\s*\d+\s*\([^)]+\))',  # A-8 (HOLD) 형태
            ]
            
            materials = []
            for pattern in material_patterns:
                matches = re.findall(pattern, text, re.IGNORECASE)
                materials.extend(matches)
            
            if materials:
                patterns["materials"] = list(set(materials))
            
            print(f"🔍 Extracted basic patterns: {list(patterns.keys())}")
            for pattern_type, values in patterns.items():
                if isinstance(values, list):
                    print(f"   {pattern_type}: {values[:5]}{'...' if len(values) > 5 else ''}")
                else:
                    print(f"   {pattern_type}: {values}")
            
        except Exception as e:
            print(f"❌ Pattern extraction error: {e}")
            patterns = {}
        
        return patterns if patterns else {}
    
    def _extract_field_value_pairs(self, text):
        """필드-값 쌍 추출"""
        field_value_pairs = []
        
        try:
            # 번호가 있는 필드 패턴 (01, 02, 03... 형태)
            numbered_field_pattern = r'(\d{2})\s+([A-Z\s/()]+?)\s+([A-Z0-9\s:@.℃]+?)(?=\d{2}|\n\n|$)'
            matches = re.findall(numbered_field_pattern, text, re.MULTILINE)
            
            for match in matches:
                field_num, field_name, field_value = match
                field_value_pairs.append({
                    "field_number": field_num.strip(),
                    "field_name": field_name.strip(),
                    "field_value": field_value.strip(),
                    "type": "numbered_field"
                })
            
            # 콜론으로 구분된 필드 패턴
            colon_field_pattern = r'([A-Z\s]+?)\s*:\s*([A-Z0-9\s.℃/-]+?)(?=\n|$)'
            matches = re.findall(colon_field_pattern, text)
            
            for match in matches:
                field_name, field_value = match
                if len(field_name.strip()) > 2 and len(field_value.strip()) > 0:
                    field_value_pairs.append({
                        "field_name": field_name.strip(),
                        "field_value": field_value.strip(),
                        "type": "colon_separated"
                    })
            
            print(f"🏷️ Extracted {len(field_value_pairs)} field-value pairs")
            
        except Exception as e:
            print(f"❌ Field-value extraction error: {e}")
        
        return field_value_pairs
    
    def _extract_notes_section(self, text):
        """NOTES 섹션 추출"""
        notes = []
        
        try:
            # NOTES: 이후 모든 텍스트 찾기
            notes_pattern = r'NOTES?\s*:?\s*(.*?)(?=\n\n|\nREVISION|\nDATE|$)'
            notes_match = re.search(notes_pattern, text, re.DOTALL | re.IGNORECASE)
            
            if notes_match:
                notes_text = notes_match.group(1).strip()
                
                # 개별 노트 분리 (1., 2., 3. 등)
                individual_notes = re.split(r'\n\s*(\d+)\.\s*', notes_text)
                
                if len(individual_notes) > 1:
                    for i in range(1, len(individual_notes), 2):
                        if i + 1 < len(individual_notes):
                            note_num = individual_notes[i]
                            note_text = individual_notes[i + 1].strip()
                            
                            notes.append({
                                "note_number": note_num,
                                "note_text": note_text,
                                "type": "numbered_note"
                            })
                else:
                    # 번호가 없는 전체 노트
                    notes.append({
                        "note_text": notes_text,
                        "type": "general_note"
                    })
            
            print(f"📝 Extracted {len(notes)} notes")
            for note in notes:
                if "note_number" in note:
                    print(f"   Note {note['note_number']}: {note['note_text'][:50]}...")
                else:
                    print(f"   General note: {note['note_text'][:50]}...")
            
        except Exception as e:
            print(f"❌ Notes extraction error: {e}")
        
        return notes
    
    def _extract_contextual_entities(self, text):
        """컨텍스트를 고려한 엔티티 추출 - 개선된 버전"""
        entities = {}
        
        try:
            sentences = re.split(r'[.!?\n]+', text)
            
            for sentence in sentences:
                sentence = sentence.strip()
                if len(sentence) < 5:
                    continue
                
                for class_name, keywords in self.domain_keywords.items():
                    if any(keyword.lower() in sentence.lower() for keyword in keywords):
                        if class_name not in entities:
                            entities[class_name] = []
                        
                        specific_entities = self._extract_specific_entities(sentence, class_name)
                        entities[class_name].extend(specific_entities)
            
            # 중복 제거
            for class_name in entities:
                entities[class_name] = list(set(entities[class_name]))
                
        except Exception as e:
            print(f"❌ Contextual entity extraction error: {e}")
            entities = {}
        
        return entities
    
    def _extract_specific_entities(self, sentence, class_name):
        """특정 클래스에 대한 구체적 엔티티 추출 - 확장된 버전"""
        entities = []
        
        try:
            if class_name == "Equipment":
                equipment_types = re.findall(r'\b(CENTRIFUGAL|PUMP|MOTOR|DRIVER|COMPRESSOR|VESSEL|TANK|HEAT\s+EXCHANGER|HORIZONTAL)\b', sentence.upper())
                entities.extend(equipment_types)
                
                equipment_ids = re.findall(r'\b([A-Z]-?\d+(?:\s*[A-Z]/?)*)\b', sentence)
                entities.extend(equipment_ids)
            
            elif class_name == "ProcessRequirement":
                process_vars = re.findall(r'\b(temperature|pressure|flow|capacity|viscosity|density|npsh|head|suction|discharge)\b', sentence.lower())
                entities.extend(process_vars)
                
                for unit_type, units in self.unit_patterns.items():
                    for unit in units:
                        pattern = rf'(\d+\.?\d*\s*{re.escape(unit)})'
                        matches = re.findall(pattern, sentence, re.IGNORECASE)
                        entities.extend(matches)
            
            elif class_name == "Project":
                project_info = re.findall(r'\b([A-Z0-9]{3,}(?:-[A-Z0-9]+)*)\b', sentence)
                entities.extend(project_info)
            
            elif class_name == "Person":
                if any(word in sentence.lower() for word in ['by', 'checked', 'reviewed', 'approved']):
                    names = re.findall(r'\b([A-Z]{2,4})\b', sentence)
                    entities.extend(names)
            
            elif class_name == "Field":
                # 필드명 추출
                field_names = re.findall(r'\b([A-Z\s]{3,20})\b(?=\s*:|\s*\()', sentence)
                entities.extend(field_names)
                    
        except Exception as e:
            print(f"❌ Specific entity extraction error for {class_name}: {e}")
        
        return entities
    
    def _extract_relations(self, text, entities):
        """엔티티 간 관계 추출 - 확장된 버전"""
        relations = []
        
        try:
            relation_patterns = {
                "hasEquipment": (r'(project|job).*?(equipment|pump|motor)', "Project", "Equipment"),
                "hasProcessReq": (r'(equipment|pump).*?(temperature|pressure|flow)', "Equipment", "ProcessRequirement"),
                "reviewedBy": (r'(revision|document).*?(?:by|checked|reviewed).*?([A-Z]{2,4})', "Revision", "Person"),
                "hasValue": (r'(\w+).*?(\d+\.?\d*\s*[a-zA-Z/%]+)', "ProcessRequirement", "Literal"),
                "hasField": (r'(\d{2})\s+([A-Z\s]+)', "Document", "Field"),
                "hasNote": (r'(NOTE|NOTES)\s*:?\s*(\d+)', "Document", "Note")
            }
            
            for relation_name, (pattern, domain_class, range_class) in relation_patterns.items():
                matches = re.findall(pattern, text, re.IGNORECASE | re.DOTALL)
                for match in matches:
                    if isinstance(match, tuple) and len(match) >= 2:
                        relations.append({
                            "property": relation_name,
                            "domain": domain_class,
                            "range": range_class,
                            "instances": match,
                            "confidence": 0.7
                        })
                        
        except Exception as e:
            print(f"❌ Relation extraction error: {e}")
        
        return relations
    
    def _calculate_confidence(self, patterns, entities):
        """신뢰도 점수 계산 - 개선된 버전"""
        confidence_scores = {}
        
        try:
            for class_name, entity_list in entities.items():
                for entity in entity_list:
                    confidence = 0.5
                    
                    if class_name in self.domain_keywords:
                        if any(keyword in entity.lower() for keyword in self.domain_keywords[class_name]):
                            confidence += 0.2
                    
                    if re.match(r'^[A-Z]-?\d+', entity):
                        confidence += 0.2
                    
                    if re.match(r'^\d+\.?\d*\s*[a-zA-Z/%]+$', entity):
                        confidence += 0.3
                    
                    # 길이 기반 보정
                    if len(entity) > 10:
                        confidence += 0.1
                    
                    confidence_scores[entity] = min(confidence, 1.0)
                    
        except Exception as e:
            print(f"❌ Confidence calculation error: {e}")
        
        return confidence_scores
    
    def _match_to_ontology(self, entities):
        """온톨로지 스키마와 매칭 - 개선된 버전"""
        matches = {}
        
        try:
            for class_name, entity_list in entities.items():
                if class_name in self.classes:
                    matches[class_name] = []
                    for entity in entity_list:
                        match_info = {
                            "entity": entity,
                            "ontology_class": class_name,
                            "confidence": self.confidence_scores.get(entity, 0.5),
                            "properties": self._suggest_properties(entity, class_name)
                        }
                        matches[class_name].append(match_info)
                        
        except Exception as e:
            print(f"❌ Ontology matching error: {e}")
        
        return matches
    
    def _suggest_properties(self, entity, class_name):
        """엔티티에 적합한 프로퍼티 제안 - 확장된 버전"""
        suggestions = []
        
        try:
            if class_name == "Equipment":
                suggestions.extend(["itemNo", "equipmentType", "capacity", "material", "classification"])
            elif class_name == "Project":
                suggestions.extend(["jobNo", "projectName", "docNo", "client", "location"])
            elif class_name == "ProcessRequirement":
                suggestions.extend(["value", "unit", "condition", "operatingCase", "maximum", "minimum"])
            elif class_name == "Person":
                suggestions.extend(["name", "role", "initials"])
            elif class_name == "Field":
                suggestions.extend(["fieldNumber", "fieldName", "fieldValue", "fieldType"])
            elif class_name == "Note":
                suggestions.extend(["noteNumber", "noteText", "noteType"])
                
        except Exception as e:
            print(f"❌ Property suggestion error: {e}")
        
        return suggestions
    
    def _generate_domain_insights(self, text):
        """도메인 특화 인사이트 생성 - 확장된 버전"""
        insights = {
            "document_type": "technical_specification",
            "industry_domain": "process_engineering",
            "complexity_score": min(len(text) / 1000, 5.0),
            "technical_density": len(re.findall(r'\d+\.?\d*\s*[a-zA-Z/%]+', text)) / max(len(text.split()), 1)
        }
        
        # 문서 타입 세부 분류
        if "PUMP" in text.upper():
            insights["equipment_type"] = "pump_specification"
        if "CENTRIFUGAL" in text.upper():
            insights["pump_type"] = "centrifugal"
        if "PROCESS DATA" in text.upper():
            insights["data_sheet_type"] = "process_data"
        
        # 위험도 분석
        hazard_keywords = ["FLAMMABLE", "TOXIC", "H2S", "SULFUR", "CHLORIDE"]
        hazard_count = sum(1 for keyword in hazard_keywords if keyword in text.upper())
        insights["hazard_level"] = "high" if hazard_count >= 3 else "medium" if hazard_count >= 1 else "low"
        
        return insights
    
    def _update_learned_knowledge(self, patterns, entities, relations):
        """학습된 지식 업데이트 - 확장된 버전"""
        try:
            # 패턴 학습 업데이트
            for pattern_type, values in patterns.items():
                if pattern_type not in self.learned_patterns:
                    self.learned_patterns[pattern_type] = {}
                
                if isinstance(values, list):
                    for value in values:
                        value_str = str(value) if not isinstance(value, (tuple, list)) else str(value)
                        self.learned_patterns[pattern_type][value_str] = \
                            self.learned_patterns[pattern_type].get(value_str, 0) + 1
            
            # 엔티티 인스턴스 업데이트
            for class_name, entity_list in entities.items():
                if class_name not in self.entity_instances:
                    self.entity_instances[class_name] = set()
                
                for entity in entity_list:
                    self.entity_instances[class_name].add(str(entity))
            
            print(f"📚 Knowledge updated: {len(self.learned_patterns)} pattern types, "
                  f"{sum(len(instances) for instances in self.entity_instances.values())} entity instances")
            
        except Exception as e:
            print(f"❌ Knowledge update error: {e}")

# PDF 처리 및 그래프 생성 (완전 개선된 버전)
def process_pdf_to_graph(pdf_content, filename):
    """PDF 내용을 처리하여 완전한 지식 그래프 생성"""
    print(f"📄 Processing PDF with advanced ontology learning: {filename}")
    
    # 강화된 온톨로지 학습
    learning_results = ontology_learner.learn_from_text(pdf_content)
    
    # 그래프 생성
    G = nx.DiGraph()
    node_counter = 0
    
    # 문서 루트 노드
    doc_node = f"Document_{filename.replace('.', '_')}_{node_counter}"
    G.add_node(doc_node, node_type="entity", ontology_class="Document")
    node_counter += 1
    
    # ========== 1. BASIC PATTERNS 처리 (확장된 패턴들) ==========
    patterns = learning_results.get("patterns", {})
    
    # 1-1. Revision Numbers 처리 (모든 리비전)
    if "revision_numbers" in patterns:
        for rev_num in patterns["revision_numbers"]:
            rev_node = f"Revision_{rev_num}_{node_counter}"
            G.add_node(rev_node, 
                      node_type="entity", 
                      ontology_class="Revision",
                      confidence=0.9)
            
            G.add_edge(doc_node, rev_node, relation="hasRevision")
            
            # 리비전 값 리터럴 노드
            rev_value_node = f"RevisionValue_{rev_num}_{node_counter}"
            G.add_node(rev_value_node, 
                      node_type="literal", 
                      ontology_class="string",
                      confidence=0.9)
            
            G.add_edge(rev_node, rev_value_node, relation="hasValue")
            node_counter += 1
            print(f"✅ Added Revision: {rev_num}")
    
    # 1-2. Dates 처리 (모든 날짜)
    if "dates" in patterns:
        for date_str in patterns["dates"]:
            date_node = f"Date_{date_str.replace('-', '_')}_{node_counter}"
            G.add_node(date_node, 
                      node_type="entity", 
                      ontology_class="Date",
                      confidence=0.9)
            
            G.add_edge(doc_node, date_node, relation="hasDate")
            
            # 날짜 값 리터럴 노드
            date_value_node = f"DateValue_{date_str.replace('-', '_')}_{node_counter}"
            G.add_node(date_value_node, 
                      node_type="literal", 
                      ontology_class="date",
                      confidence=0.9)
            
            G.add_edge(date_node, date_value_node, relation="hasValue")
            node_counter += 1
            print(f"✅ Added Date: {date_str}")
    
    # 1-3. Person Names 처리 (모든 사람)
    if "person_names" in patterns:
        for person_name in patterns["person_names"]:
            person_node = f"Person_{person_name}_{node_counter}"
            G.add_node(person_node, 
                      node_type="entity", 
                      ontology_class="Person",
                      confidence=0.9)
            
            G.add_edge(doc_node, person_node, relation="reviewedBy")
            
            # 사람 이름 리터럴 노드
            name_value_node = f"PersonName_{person_name}_{node_counter}"
            G.add_node(name_value_node, 
                      node_type="literal", 
                      ontology_class="string",
                      confidence=0.9)
            
            G.add_edge(person_node, name_value_node, relation="hasValue")
            node_counter += 1
            print(f"✅ Added Person: {person_name}")
    
    # 1-4. Equipment IDs 처리 (모든 장비)
    if "equipment_ids" in patterns:
        for eq_id in patterns["equipment_ids"][:10]:  # 최대 10개
            eq_node = f"Equipment_{eq_id.replace('-', '_').replace('/', '_').replace(' ', '_')}_{node_counter}"
            G.add_node(eq_node, 
                      node_type="entity", 
                      ontology_class="Equipment",
                      confidence=0.85)
            
            G.add_edge(doc_node, eq_node, relation="hasEquipment")
            
            # 장비 ID 리터럴 노드
            eq_value_node = f"EquipmentID_{eq_id.replace('-', '_').replace('/', '_').replace(' ', '_')}_{node_counter}"
            G.add_node(eq_value_node, 
                      node_type="literal", 
                      ontology_class="string",
                      confidence=0.85)
            
            G.add_edge(eq_node, eq_value_node, relation="hasValue")
            node_counter += 1
            print(f"✅ Added Equipment: {eq_id}")
    
    # 1-5. Project IDs 처리
    if "project_ids" in patterns:
        for proj_id in patterns["project_ids"][:5]:  # 최대 5개
            proj_node = f"Project_{proj_id.replace('-', '_').replace(' ', '_')}_{node_counter}"
            G.add_node(proj_node, 
                      node_type="entity", 
                      ontology_class="Project",
                      confidence=0.9)
            
            G.add_edge(doc_node, proj_node, relation="hasProject")
            
            # 프로젝트 ID 리터럴 노드
            proj_value_node = f"ProjectID_{proj_id.replace('-', '_').replace(' ', '_')}_{node_counter}"
            G.add_node(proj_value_node, 
                      node_type="literal", 
                      ontology_class="string",
                      confidence=0.9)
            
            G.add_edge(proj_node, proj_value_node, relation="hasValue")
            node_counter += 1
            print(f"✅ Added Project: {proj_id}")
    
    # 1-6. Process Terms 처리 (화학공정 용어들)
    if "process_terms" in patterns:
        for term, category in patterns["process_terms"][:15]:  # 최대 15개
            term_node = f"ProcessTerm_{term.replace(' ', '_').replace('/', '_')}_{node_counter}"
            G.add_node(term_node, 
                      node_type="entity", 
                      ontology_class="ProcessTerm",
                      confidence=0.8)
            
            G.add_edge(doc_node, term_node, relation="hasProcessTerm")
            
            # 용어 값 리터럴 노드
            term_value_node = f"TermValue_{term.replace(' ', '_').replace('/', '_')}_{node_counter}"
            G.add_node(term_value_node, 
                      node_type="literal", 
                      ontology_class="string",
                      confidence=0.8)
            
            G.add_edge(term_node, term_value_node, relation="hasValue")
            node_counter += 1
            print(f"✅ Added Process Term: {term} ({category})")
    
    # 1-7. Materials 처리 (API 분류 등)
    if "materials" in patterns:
        for material in patterns["materials"][:5]:  # 최대 5개
            mat_node = f"Material_{material.replace(' ', '_').replace('-', '_')}_{node_counter}"
            G.add_node(mat_node, 
                      node_type="entity", 
                      ontology_class="Material",
                      confidence=0.85)
            
            G.add_edge(doc_node, mat_node, relation="hasMaterial")
            
            # 재료 값 리터럴 노드
            mat_value_node = f"MaterialValue_{material.replace(' ', '_').replace('-', '_')}_{node_counter}"
            G.add_node(mat_value_node, 
                      node_type="literal", 
                      ontology_class="string",
                      confidence=0.85)
            
            G.add_edge(mat_node, mat_value_node, relation="hasValue")
            node_counter += 1
            print(f"✅ Added Material: {material}")
    
    # ========== 2. FIELD-VALUE PAIRS 처리 ==========
    field_value_pairs = learning_results.get("field_value_pairs", [])
    
    for i, field_pair in enumerate(field_value_pairs[:20]):  # 최대 20개
        field_name = field_pair.get("field_name", "Unknown")
        field_value = field_pair.get("field_value", "")
        field_number = field_pair.get("field_number", "")
        
        # 필드 엔티티 노드
        field_node = f"Field_{field_name.replace(' ', '_').replace('/', '_').replace('(', '').replace(')', '')}_{node_counter}"
        G.add_node(field_node, 
                  node_type="entity", 
                  ontology_class="Field",
                  confidence=0.85)
        
        G.add_edge(doc_node, field_node, relation="hasField")
        
        # 필드명 리터럴 노드
        field_name_node = f"FieldName_{field_name.replace(' ', '_').replace('/', '_')}_{node_counter}"
        G.add_node(field_name_node, 
                  node_type="literal", 
                  ontology_class="string",
                  confidence=0.85)
        
        G.add_edge(field_node, field_name_node, relation="hasFieldName")
        
        # 필드값 리터럴 노드
        if field_value:
            field_value_node = f"FieldValue_{field_value.replace(' ', '_').replace('/', '_')}_{node_counter}"
            G.add_node(field_value_node, 
                      node_type="literal", 
                      ontology_class="string",
                      confidence=0.85)
            
            G.add_edge(field_node, field_value_node, relation="hasFieldValue")
        
        # 필드 번호가 있으면 추가
        if field_number:
            field_num_node = f"FieldNumber_{field_number}_{node_counter}"
            G.add_node(field_num_node, 
                      node_type="literal", 
                      ontology_class="integer",
                      confidence=0.9)
            
            G.add_edge(field_node, field_num_node, relation="hasFieldNumber")
        
        node_counter += 1
        print(f"✅ Added Field: {field_number} {field_name} = {field_value[:30]}...")
    
    # ========== 3. NOTES 처리 ==========
    notes = learning_results.get("notes", [])
    
    for note in notes[:10]:  # 최대 10개
        note_text = note.get("note_text", "")
        note_number = note.get("note_number", "")
        note_type = note.get("type", "general_note")
        
        # NOTE 엔티티 노드
        if note_number:
            note_node = f"Note_{note_number}_{node_counter}"
        else:
            note_node = f"Note_General_{node_counter}"
            
        G.add_node(note_node, 
                  node_type="entity", 
                  ontology_class="Note",
                  confidence=0.9)
        
        G.add_edge(doc_node, note_node, relation="hasNote")
        
        # NOTE 번호 리터럴 노드
        if note_number:
            note_num_node = f"NoteNumber_{note_number}_{node_counter}"
            G.add_node(note_num_node, 
                      node_type="literal", 
                      ontology_class="integer",
                      confidence=0.9)
            
            G.add_edge(note_node, note_num_node, relation="hasNoteNumber")
        
            # NOTE 텍스트 리터럴 노드
        if note_number:
            note_text_node = f"NoteText_{note_number}_{node_counter}"
        else:
            note_text_node = f"NoteText_General_{node_counter}"
            
        G.add_node(note_text_node, 
                node_type="literal", 
                ontology_class="text",
                confidence=0.9)


    # ========== 4. NUMERICAL VALUES 처리 (단위별 그룹화) ==========
    if "numerical_values" in patterns:
        unit_groups = {}
        for value, unit, unit_type in patterns["numerical_values"]:
            if unit_type not in unit_groups:
                unit_groups[unit_type] = []
            unit_groups[unit_type].append((value, unit))
        
        for unit_type, values in unit_groups.items():
            # 단위 타입별 그룹 노드
            group_node = f"ProcessGroup_{unit_type}_{node_counter}"
            G.add_node(group_node, 
                      node_type="entity", 
                      ontology_class="ProcessRequirement",
                      confidence=0.8)
            
            G.add_edge(doc_node, group_node, relation="hasProcessReq")
            
            # 개별 값들 추가 (최대 5개)
            for value, unit in values[:5]:
                val_node = f"Value_{value}_{unit.replace('/', '_').replace(' ', '_')}_{node_counter}"
                G.add_node(val_node, 
                          node_type="literal", 
                          ontology_class="decimal",
                          confidence=0.9)
                
                G.add_edge(group_node, val_node, relation="hasValue")
                node_counter += 1
                print(f"✅ Added {unit_type}: {value} {unit}")
    
    # ========== 5. 기존 CONTEXTUAL ENTITIES 처리 (보완) ==========
    matched_entities = learning_results.get("matched_entities", {})
    
    for class_name, entity_matches in matched_entities.items():
        for match_info in entity_matches[:3]:  # 최대 3개만 (중복 방지)
            entity = match_info["entity"]
            confidence = match_info["confidence"]
            
            # 이미 추가된 엔티티인지 확인 (중복 방지)
            entity_clean = entity.replace(' ', '_').replace('/', '_')
            existing_nodes = [n for n in G.nodes() if entity_clean in n]
            
            if not existing_nodes and confidence > 0.5:
                entity_node = f"{class_name}_{entity_clean}_{node_counter}"
                G.add_node(entity_node, 
                          node_type="entity", 
                          ontology_class=class_name,
                          confidence=confidence)
                
                G.add_edge(doc_node, entity_node, relation=f"has{class_name}")
                
                # 엔티티 값 리터럴 노드
                value_node = f"EntityValue_{entity_clean}_{node_counter}"
                G.add_node(value_node, 
                          node_type="literal", 
                          ontology_class="string",
                          confidence=confidence)
                
                G.add_edge(entity_node, value_node, relation="hasValue")
                node_counter += 1
    
    # ========== 6. 그래프 완성 처리 ==========
    
    # 노드 특징 생성
    node_features = {}
    for node in G.nodes():
        node_data = G.nodes[node]
        node_features[node] = {
            "type": node_data.get("node_type", "entity"),
            "ontology_class": node_data.get("ontology_class", "Unknown"),
            "confidence": node_data.get("confidence", 0.5)
        }
    
    # 신뢰도 기반 예측 생성
    predictions = []
    for node in G.nodes():
        node_info = node_features[node]
        confidence = node_info["confidence"]
        node_type = node_info["type"]
        
        if confidence > 0.8:
            if node_type == "entity":
                predictions.append(1)
            elif node_type == "literal":
                predictions.append(2)
            else:
                predictions.append(0)
        else:
            predictions.append(1 if node_type == "entity" else 2)
    
    print(f"✅ Complete enhanced graph generated:")
    print(f"   - Total Nodes: {G.number_of_nodes()}")
    print(f"   - Total Edges: {G.number_of_edges()}")
    print(f"   - Entity Nodes: {sum(1 for n in node_features.values() if n['type'] == 'entity')}")
    print(f"   - Literal Nodes: {sum(1 for n in node_features.values() if n['type'] == 'literal')}")
    print(f"   - High Confidence: {sum(1 for n in node_features.values() if n['confidence'] > 0.8)}")
    
    return G, node_features, predictions, learning_results

# 샘플 데이터 생성 함수
def create_sample_graph():
    G = nx.DiGraph()
    
    nodes = [
        ("Project_7T04", {"node_type": "entity", "ontology_class": "Project"}),
        ("Equipment_P2105", {"node_type": "entity", "ontology_class": "Equipment"}), 
        ("ProcessReq_Temp", {"node_type": "entity", "ontology_class": "ProcessRequirement"}),
        ("7T04", {"node_type": "literal", "ontology_class": "string"}),
        ("P-2105 A/B", {"node_type": "literal", "ontology_class": "string"}),
        ("384 ℃", {"node_type": "literal", "ontology_class": "decimal"})
    ]
    
    for node_id, attrs in nodes:
        G.add_node(node_id, **attrs)
    
    edges = [
        ("Project_7T04", "7T04", "hasValue"),
        ("Equipment_P2105", "P-2105 A/B", "hasValue"),
        ("ProcessReq_Temp", "384 ℃", "hasValue"),
        ("Project_7T04", "Equipment_P2105", "hasEquipment"),
        ("Equipment_P2105", "ProcessReq_Temp", "hasProcessReq")
    ]
    
    for src, dst, rel in edges:
        G.add_edge(src, dst, relation=rel)
    
    node_features = {}
    for node in G.nodes():
        node_data = G.nodes[node]
        node_features[node] = {
            "type": node_data.get("node_type", "entity"),
            "ontology_class": node_data.get("ontology_class", "Unknown"),
            "confidence": 0.8 if node_data.get("node_type") == "entity" else 0.9
        }
    
    predictions = []
    for node in G.nodes():
        node_type = node_features[node]["type"]
        if node_type == "entity":
            predictions.append(1)
        elif node_type == "literal":
            predictions.append(2)
        else:
            predictions.append(0)
    
    return G, node_features, predictions

class NaturalLanguageQueryProcessor:
    def __init__(self, ontology_learner, db_manager):
        self.ontology_learner = ontology_learner
        self.db_manager = db_manager
        
        # 확장된 쿼리 패턴 매핑 (새로운 엔티티 타입 지원)
        self.query_patterns = {
            "show_all": [
                r"show\s+all\s+(\w+)",
                r"list\s+all\s+(\w+)",
                r"find\s+all\s+(\w+)",
                r"get\s+all\s+(\w+)"
            ],
            "filter_by_confidence": [
                r"(?:show|find|list)\s+(\w+)\s+with\s+(?:high|good)\s+confidence",
                r"(?:show|find|list)\s+high\s+confidence\s+(\w+)",
                r"(\w+)\s+with\s+confidence\s+>\s*(\d+\.?\d*)"
            ],
            "filter_by_class": [
                r"(?:show|find|list)\s+(\w+)\s+(?:of\s+type|class)\s+(\w+)",
                r"(\w+)\s+that\s+are\s+(\w+)",
                r"all\s+(\w+)\s+(\w+)"
            ],
            "count": [
                r"(?:how\s+many|count)\s+(\w+)",
                r"number\s+of\s+(\w+)",
                r"total\s+(\w+)"
            ],
            "stats": [
                r"(?:statistics|stats)\s+(?:for|of|about)?\s*(\w+)?",
                r"(?:summary|overview)\s+(?:of|about)?\s*(\w+)?",
                r"(?:analyze|analysis)\s+(\w+)?",
                r"database\s+(?:stats|statistics)"
            ],
            "relationships": [
                r"(?:show|find|list)\s+(?:relationships?|relations?|connections?)",
                r"what\s+is\s+connected\s+to\s+(\w+)",
                r"(\w+)\s+(?:connected|related|linked)\s+to\s+(\w+)"
            ],
            "recent": [
                r"(?:recent|latest|newest)\s+(\w+)",
                r"last\s+(\d+)\s+(\w+)",
                r"show\s+recent\s+(?:documents|files)"
            ],
            "search": [
                r"search\s+(?:for\s+)?(.+)",
                r"find\s+(.+)\s+in\s+database",
                r"lookup\s+(.+)"
            ],
            # 새로운 특화 패턴들
            "field_search": [
                r"(?:show|find|list)\s+field\s+(.+)",
                r"field\s+(.+)",
                r"what\s+is\s+(.+)\s+field"
            ],
            "note_search": [
                r"(?:show|find|list)\s+note\s*(\d*)",
                r"note\s+(\d+)",
                r"notes?\s+about\s+(.+)"
            ]
        }
        
        # 대폭 확장된 동의어 매핑 (화학공정 특화)
        self.synonyms = {
            # 기본 장비 관련
            "equipment": ["equipment", "machine", "device", "pump", "motor", "driver", "vessel", "tank", "compressor"],
            "project": ["project", "job", "document", "doc", "specification", "drawing"],
            "requirement": ["requirement", "spec", "specification", "parameter", "condition"],
            "person": ["person", "people", "engineer", "reviewer", "checker", "by", "checked", "reviewed"],
            "entity": ["entity", "entities", "item", "object", "node"],
            "literal": ["literal", "value", "data", "text"],
            "confidence": ["confidence", "certainty", "reliability", "accuracy"],
            "documents": ["documents", "files", "pdfs", "papers"],
            
            # 프로세스 관련 (대폭 확장)
            "temperature": ["temperature", "temp", "pumping temperature", "operating temperature", "minimum temperature", "maximum temperature"],
            "pressure": ["pressure", "suction pressure", "discharge pressure", "differential pressure", "vapor pressure"],
            "capacity": ["capacity", "flow", "flowrate", "flow rate", "rated capacity", "normal capacity"],
            "viscosity": ["viscosity", "fluid viscosity", "liquid viscosity"],
            "density": ["density", "specific gravity", "fluid density"],
            "head": ["head", "differential head", "pump head"],
            "npsh": ["npsh", "npsha", "net positive suction head", "available npsh"],
            
            # 재료/분류
            "material": ["material", "materials", "api class", "classification", "casing", "impeller", "shaft"],
            "api": ["api", "api class", "api classification", "american petroleum institute"],
            
            # 운전 조건
            "duty": ["duty", "operation", "operating", "continuous", "intermittent"],
            "startup": ["startup", "start-up", "start up", "starting", "initial condition"],
            "minimum": ["minimum", "min", "lowest", "bottom"],
            "maximum": ["maximum", "max", "highest", "top"],
            "normal": ["normal", "standard", "typical", "operating"],
            "rated": ["rated", "design", "nominal"],
            
            # 화학공정 유체
            "fluid": ["fluid", "liquid", "gas oil", "overflash", "ah feed", "am feed"],
            "overflash": ["overflash", "over flash", "overhead"],
            "feed": ["feed", "ah feed", "am feed", "feedstock"],
            
            # 안전/위험
            "flammable": ["flammable", "combustible", "fire hazard"],
            "toxic": ["toxic", "poisonous", "hazardous"],
            "sulfur": ["sulfur", "sulphur", "h2s", "hydrogen sulfide"],
            
            # 설치/위치
            "location": ["location", "indoor", "outdoor", "under roof"],
            "insulation": ["insulation", "steam tracing", "steam jacket", "heating"],
            
            # 제어/조작
            "manual": ["manual", "hand operated", "manually operated"],
            "automatic": ["automatic", "auto", "automatically operated"],
            
            # NOTE 관련 키워드
            "note": ["note", "notes", "remark", "comment", "description"],
            "foundation": ["foundation", "base", "mounting", "support"],
            "turndown": ["turndown", "turn down", "reduced operation", "minimum operation"],
            "overdesign": ["overdesign", "over design", "safety margin", "design margin"],
            "mdmt": ["mdmt", "minimum design metal temperature", "minimum temperature"],
            
            # 필드 관련
            "field": ["field", "parameter", "specification", "data", "information"],
            "type": ["type", "classification", "category", "kind"],
            "required": ["required", "specification", "requirement", "needed"]
        }
        
        # 약어/전체명 매핑
        self.abbreviation_mapping = {
            "npsh": "net positive suction head",
            "npsha": "npsh available",
            "mdmt": "minimum design metal temperature",
            "api": "american petroleum institute",
            "h2s": "hydrogen sulfide",
            "cp": "centipoise",
            "gpm": "gallons per minute",
            "bph": "barrels per hour",
            "psi": "pounds per square inch",
            "deg": "degree",
            "wt": "weight",
            "pt": "point",
            "max": "maximum",
            "min": "minimum",
            "nor": "normal",
            "oper": "operating",
            "temp": "temperature"
        }
        
        # 컨텍스트별 키워드 매핑
        self.context_keywords = {
            "temperature_related": ["pumping", "operating", "minimum", "maximum", "design", "metal"],
            "pressure_related": ["suction", "discharge", "differential", "vapor", "rated"],
            "flow_related": ["capacity", "rate", "continuous", "minimum", "maximum", "rated", "normal"],
            "material_related": ["casing", "impeller", "shaft", "api", "class", "classification"],
            "note_related": ["npsha", "foundation", "turndown", "overdesign", "mdmt", "startup", "slop"],
            "safety_related": ["flammable", "toxic", "h2s", "sulfur", "leakage", "hazard"]
        }
    
    def process_query(self, query, graph_data=None):
        """자연어 쿼리를 처리하여 결과 반환 (대폭 개선된 버전)"""
        query = query.lower().strip()
        print(f"🔍 Processing enhanced query: '{query}'")
        
        # 1. 쿼리 전처리 (약어 확장, 동의어 정규화)
        processed_query = self._preprocess_query(query)
        print(f"🔄 Processed query: '{processed_query}'")
        
        # 2. 쿼리 타입 식별
        query_type, matches = self._identify_query_type(processed_query)
        print(f"🎯 Query type: {query_type}, matches: {matches}")
        
        # 3. 데이터베이스 우선 쿼리들
        if query_type in ["stats", "recent"]:
            return self._handle_database_query(query_type, matches, graph_data, processed_query)
        
        # 4. 새로운 특화 쿼리들
        if query_type == "field_search":
            return self._handle_field_search(matches, graph_data)
        elif query_type == "note_search":
            return self._handle_note_search(matches, graph_data)
        
        # 5. 메모리 데이터 쿼리들 (기존 + 개선)
        if graph_data:
            nodes = graph_data.get("nodes", [])
            edges = graph_data.get("edges", [])
            stats = graph_data.get("stats", {})
            learning_results = graph_data.get("learning_results", {})
            
            if query_type == "show_all":
                return self._handle_show_all(matches, nodes, edges)
            elif query_type == "filter_by_confidence":
                return self._handle_confidence_filter(matches, nodes)
            elif query_type == "filter_by_class":
                return self._handle_class_filter(matches, nodes)
            elif query_type == "count":
                return self._handle_count(matches, nodes)
            elif query_type == "relationships":
                return self._handle_relationships(matches, nodes, edges)
        
        # 6. Fallback: 향상된 데이터베이스 검색
        return self._handle_enhanced_database_fallback(processed_query, query)
    
    def _preprocess_query(self, query):
        """쿼리 전처리: 약어 확장 및 동의어 정규화"""
        processed = query
        
        # 1. 약어 확장
        for abbr, full_form in self.abbreviation_mapping.items():
            processed = re.sub(rf'\b{re.escape(abbr)}\b', full_form, processed, flags=re.IGNORECASE)
        
        # 2. 특수 문자 정리
        processed = re.sub(r'[^\w\s-]', ' ', processed)
        processed = re.sub(r'\s+', ' ', processed).strip()
        
        return processed
    
     # ⭐ 여기에 추가! (다른 메서드들 사이 아무 곳이나)
    def _search_memory_data(self, query, graph_data):
        """메모리 데이터에서 직접 검색"""
        if not graph_data or 'nodes' not in graph_data:
            return None
        
        nodes = graph_data['nodes']
        query_lower = query.lower()
        
        # 모든 노드에서 검색 (Entity + Literal)
        matches = [node for node in nodes 
                  if query_lower in node.get('id', '').lower()]
        
        return {
            "type": "table",
            "data": matches,
            "message": f"Found {len(matches)} items in memory matching '{query}'",
            "columns": ["id", "type", "ontology_class", "confidence"]
        }



    def _identify_query_type(self, query):
        """쿼리 타입과 매칭된 그룹 식별"""
        for query_type, patterns in self.query_patterns.items():
            for pattern in patterns:
                match = re.search(pattern, query, re.IGNORECASE)
                if match:
                    return query_type, match.groups()
        return "unknown", ()
    
    def _normalize_term(self, term):
        """용어 정규화 (동의어 처리)"""
        if not term:
            return term
            
        term = term.lower()
        for canonical, synonyms in self.synonyms.items():
            if term in synonyms:
                return canonical
        return term
    
    def _handle_database_query(self, query_type, matches, graph_data, processed_query):
        """데이터베이스 기반 쿼리 처리 (검색 강화)"""
        try:
            if query_type == "stats":
                db_stats = self.db_manager.get_database_stats()
                stats_data = {
                    "Total Documents": db_stats.get("total_documents", 0),
                    "Total Nodes": db_stats.get("total_nodes", 0),
                    "Total Edges": db_stats.get("total_edges", 0),
                    "Total Patterns": db_stats.get("total_patterns", 0),
                    "High Confidence Entities": db_stats.get("high_confidence_entities", 0)
                }
                return {
                    "type": "stat",
                    "data": stats_data,
                    "message": "Database statistics across all processed documents"
                }
            
            elif query_type == "recent":
                recent_query = """
                    SELECT filename, upload_time, content_length, processing_time
                    FROM documents 
                    ORDER BY upload_time DESC 
                    LIMIT 10
                """
                result_df = self.db_manager.execute_query(recent_query)
                
                if not result_df.empty:
                    result_df['upload_time'] = result_df['upload_time'].apply(
                        lambda x: x.split('T')[0] if 'T' in str(x) else str(x)
                    )
                    return {
                        "type": "table",
                        "data": result_df.to_dict('records'),
                        "message": f"Found {len(result_df)} recent documents",
                        "columns": ["filename", "upload_time", "content_length", "processing_time"]
                    }
                else:
                    return {"type": "table", "data": [], "message": "No documents found in database"}
            
            elif query_type == "search":
                search_term = matches[0] if matches else ""
                return self._enhanced_database_search(search_term, processed_query)
        
        except Exception as e:
            print(f"❌ Enhanced fallback error: {e}")
            return {"type": "error", "message": "Enhanced search failed. Try simpler terms."}
            print(f"❌ Database query error: {e}")
            return {"type": "error", "message": f"Database query failed: {str(e)}"}
    
    def _enhanced_database_search(self, search_term, processed_query):
        """향상된 데이터베이스 검색 (다중 키워드, 컨텍스트 고려)"""
        try:
            # 검색어에서 의미있는 키워드들 추출
            keywords = self._extract_meaningful_keywords(search_term, processed_query)
            print(f"🔍 Extracted keywords: {keywords}")
            
            if not keywords:
                return {"type": "suggestions", "data": ["temperature", "pressure", "capacity", "npsha", "startup"], 
                       "message": "Try searching for specific terms like:"}
            
            # 다중 키워드 검색 조건 생성
            search_conditions = []
            for keyword in keywords[:5]:  # 최대 5개 키워드
                search_conditions.extend([
                    f"LOWER(n.id) LIKE '%{keyword}%'",
                    f"LOWER(n.ontology_class) LIKE '%{keyword}%'",
                    f"LOWER(d.filename) LIKE '%{keyword}%'"
                ])
            
            search_query = f"""
                SELECT DISTINCT n.id, n.node_type, n.ontology_class, n.confidence, d.filename
                FROM nodes n
                JOIN documents d ON n.document_id = d.id
                WHERE {' OR '.join(search_conditions)}
                ORDER BY n.confidence DESC, n.ontology_class
                LIMIT 25
            """
            
            result_df = self.db_manager.execute_query(search_query)
            
            return {
                "type": "table",
                "data": result_df.to_dict('records') if not result_df.empty else [],
                "message": f"Found {len(result_df)} items matching '{search_term}' (keywords: {', '.join(keywords)})",
                "columns": ["id", "node_type", "ontology_class", "confidence", "filename"]
            }
            
        except Exception as e:
            print(f"❌ Enhanced search error: {e}")
            return {"type": "error", "message": f"Enhanced search failed: {str(e)}"}
    
    def _extract_meaningful_keywords(self, search_term, processed_query):
        """검색어에서 의미있는 키워드들 추출"""
        keywords = set()
        
        # 1. 원본 검색어 분할
        original_words = search_term.split()
        keywords.update([w for w in original_words if len(w) > 2])
        
        # 2. 동의어 매핑에서 관련 키워드 찾기
        for canonical, synonyms in self.synonyms.items():
            if any(word in search_term for word in synonyms):
                keywords.add(canonical)
                keywords.update([s for s in synonyms if len(s) > 2])
        
        # 3. 컨텍스트 키워드 추가
        for context, context_keywords in self.context_keywords.items():
            if any(keyword in search_term for keyword in context_keywords):
                keywords.update(context_keywords)
        
        # 4. 불용어 제거
        stop_words = {"for", "the", "and", "or", "in", "on", "at", "to", "from", "with", "by"}
        keywords = keywords - stop_words
        
        return list(keywords)
    
    def _handle_field_search(self, matches, graph_data):
        """필드 검색 처리"""
        if not graph_data or not matches:
            return {"type": "error", "message": "No field search term provided"}
        
        search_term = matches[0].lower()
        nodes = graph_data.get("nodes", [])
        
        # 필드 관련 노드들 찾기
        field_nodes = [n for n in nodes if n.get("ontology_class") == "Field" and 
                      search_term in n.get("id", "").lower()]
        
        return {
            "type": "table",
            "data": field_nodes,
            "message": f"Found {len(field_nodes)} fields matching '{search_term}'",
            "columns": ["id", "ontology_class", "confidence"]
        }
    
    def _handle_note_search(self, matches, graph_data):
        """NOTE 검색 처리"""
        if not graph_data:
            return {"type": "error", "message": "No graph data available"}
        
        nodes = graph_data.get("nodes", [])
        
        if matches and matches[0].isdigit():
            # 특정 NOTE 번호 검색
            note_num = matches[0]
            note_nodes = [n for n in nodes if n.get("ontology_class") == "Note" and 
                         note_num in n.get("id", "")]
            message = f"Found NOTE {note_num}"
        else:
            # 모든 NOTE 검색
            note_nodes = [n for n in nodes if n.get("ontology_class") == "Note"]
            message = f"Found {len(note_nodes)} notes"
        
        return {
            "type": "table",
            "data": note_nodes,
            "message": message,
            "columns": ["id", "ontology_class", "confidence"]
        }
    
    def _handle_show_all(self, matches, nodes, edges):
        """'show all X' 타입 쿼리 처리 (개선된 버전)"""
        if not matches:
            return {"type": "table", "data": nodes[:10], "message": "Showing all nodes (limited to 10)"}
        
        target = self._normalize_term(matches[0])
        
        if target in ["entity", "entities"]:
            entities = [n for n in nodes if n.get("type") == "entity"]
            return {
                "type": "table", 
                "data": entities,
                "message": f"Found {len(entities)} entities",
                "columns": ["id", "ontology_class", "confidence"]
            }
        elif target in ["literal", "literals", "value", "values"]:
            literals = [n for n in nodes if n.get("type") == "literal"]
            return {
                "type": "table", 
                "data": literals,
                "message": f"Found {len(literals)} literals",
                "columns": ["id", "ontology_class", "confidence"]
            }
        elif target in ["field", "fields"]:
            fields = [n for n in nodes if n.get("ontology_class") == "Field"]
            return {
                "type": "table", 
                "data": fields,
                "message": f"Found {len(fields)} fields",
                "columns": ["id", "ontology_class", "confidence"]
            }
        elif target in ["note", "notes"]:
            notes = [n for n in nodes if n.get("ontology_class") == "Note"]
            return {
                "type": "table", 
                "data": notes,
                "message": f"Found {len(notes)} notes",
                "columns": ["id", "ontology_class", "confidence"]
            }
        elif target in self.synonyms.get("equipment", []):
            equipment = [n for n in nodes if n.get("ontology_class", "").lower() == "equipment"]
            return {
                "type": "table", 
                "data": equipment,
                "message": f"Found {len(equipment)} equipment entities",
                "columns": ["id", "confidence"]
            }
        elif target in self.synonyms.get("project", []):
            projects = [n for n in nodes if n.get("ontology_class", "").lower() == "project"]
            return {
                "type": "table", 
                "data": projects,
                "message": f"Found {len(projects)} project entities",
                "columns": ["id", "confidence"]
            }
        else:
            # 일반적인 검색
            filtered = [n for n in nodes if target in n.get("id", "").lower() or 
                       target in n.get("ontology_class", "").lower()]
            return {
                "type": "table", 
                "data": filtered,
                "message": f"Found {len(filtered)} items matching '{target}'",
                "columns": ["id", "type", "ontology_class", "confidence"]
            }
    
    def _handle_confidence_filter(self, matches, nodes):
        """신뢰도 기반 필터링 (개선된 버전)"""
        if len(matches) >= 2 and matches[1].replace('.', '').isdigit():
            # 특정 임계값 지정된 경우
            threshold = float(matches[1])
            target = self._normalize_term(matches[0])
        else:
            # 'high confidence' 등의 경우
            threshold = 0.8
            target = self._normalize_term(matches[0]) if matches else "entity"
        
        filtered_nodes = []
        for node in nodes:
            confidence = node.get("confidence", 0)
            if confidence > threshold:
                if target == "entity" and node.get("type") == "entity":
                    filtered_nodes.append(node)
                elif target in node.get("ontology_class", "").lower():
                    filtered_nodes.append(node)
                elif target in ["all", "any", ""]:
                    filtered_nodes.append(node)
        
        return {
            "type": "table",
            "data": filtered_nodes,
            "message": f"Found {len(filtered_nodes)} items with confidence > {threshold}",
            "columns": ["id", "type", "ontology_class", "confidence"]
        }
    
    def _handle_class_filter(self, matches, nodes):
        """클래스/타입 기반 필터링 (개선된 버전)"""
        if len(matches) >= 2:
            item_type = self._normalize_term(matches[0])
            class_name = self._normalize_term(matches[1])
            
            filtered = [n for n in nodes if 
                       class_name in n.get("ontology_class", "").lower() or
                       class_name in n.get("type", "").lower()]
            
            return {
                "type": "table",
                "data": filtered,
                "message": f"Found {len(filtered)} {item_type} of type {class_name}",
                "columns": ["id", "type", "ontology_class", "confidence"]
            }
        
        return {"type": "error", "message": "Could not parse class filter query"}
    
    def _handle_count(self, matches, nodes):
        """개수 세기 (확장된 버전)"""
        if not matches:
            total = len(nodes)
            return {
                "type": "stat",
                "data": {"Total Nodes": total},
                "message": f"Total count: {total}"
            }
        
        target = self._normalize_term(matches[0])
        
        if target in ["entity", "entities"]:
            count = sum(1 for n in nodes if n.get("type") == "entity")
        elif target in ["literal", "literals"]:
            count = sum(1 for n in nodes if n.get("type") == "literal")
        elif target in ["field", "fields"]:
            count = sum(1 for n in nodes if n.get("ontology_class") == "Field")
        elif target in ["note", "notes"]:
            count = sum(1 for n in nodes if n.get("ontology_class") == "Note")
        elif target in self.synonyms.get("equipment", []):
            count = sum(1 for n in nodes if n.get("ontology_class", "").lower() == "equipment")
        elif target in self.synonyms.get("project", []):
            count = sum(1 for n in nodes if n.get("ontology_class", "").lower() == "project")
        else:
            count = sum(1 for n in nodes if target in n.get("ontology_class", "").lower())
        
        return {
            "type": "stat",
            "data": {f"{target.title()} Count": count},
            "message": f"Count of {target}: {count}"
        }
    
    def _handle_relationships(self, matches, nodes, edges):
        """관계 정보 처리 (확장된 버전)"""
        if not edges:
            return {
                "type": "table",
                "data": [],
                "message": "No relationships found in the current graph"
            }
        
        # 관계 통계
        relation_counts = {}
        for edge in edges:
            rel = edge.get("relation", "unknown")
            relation_counts[rel] = relation_counts.get(rel, 0) + 1
        
        relationship_data = [
            {"Relationship Type": rel, "Count": count}
            for rel, count in relation_counts.items()
        ]
        
        return {
            "type": "table",
            "data": relationship_data,
            "message": f"Found {len(edges)} relationships of {len(relation_counts)} types",
            "columns": ["Relationship Type", "Count"]
        }
    
    def _handle_enhanced_database_fallback(self, processed_query, original_query):
        """향상된 데이터베이스 fallback 검색"""
        try:

             # 메모리 데이터 먼저 검색
            if hasattr(self, '_last_graph_data') and self._last_graph_data:
                memory_result = self._search_memory_data(original_query, self._last_graph_data)
                if memory_result and memory_result.get('data'):
                    return memory_result


            keywords = self._extract_meaningful_keywords(original_query, processed_query)
            
            if not keywords:
                return {
                    "type": "suggestions",
                    "data": [
                        "temperature → pumping temperature fields",
                        "pressure → suction/discharge pressure",
                        "capacity → flow rate information", 
                        "npsha → foundation notes",
                        "startup → start-up conditions",
                        "api → material classifications"
                    ],
                    "message": "Try these enhanced search examples:"
                }
            
            # 컨텍스트 기반 키워드 확장
            expanded_keywords = set(keywords)
            for keyword in keywords:
                for context, context_keywords in self.context_keywords.items():
                    if keyword in context_keywords:
                        expanded_keywords.update(context_keywords[:3])  # 최대 3개 추가
            
            keyword_conditions = " OR ".join([
                f"LOWER(n.id) LIKE '%{kw}%' OR LOWER(n.ontology_class) LIKE '%{kw}%'"
                for kw in list(expanded_keywords)[:8]  # 최대 8개 키워드
            ])
            
            search_query = f"""
                SELECT n.id, n.node_type, n.ontology_class, n.confidence, d.filename
                FROM nodes n
                JOIN documents d ON n.document_id = d.id
                WHERE {keyword_conditions}
                ORDER BY n.confidence DESC, 
                    CASE n.ontology_class 
                        WHEN 'Field' THEN 1 
                        WHEN 'Note' THEN 2 
                        WHEN 'ProcessRequirement' THEN 3 
                        ELSE 4 
                    END
                LIMIT 20
            """
            
            result_df = self.db_manager.execute_query(search_query)
            
            if not result_df.empty:
                return {
                    "type": "table",
                    "data": result_df.to_dict('records'),
                    "message": f"Enhanced search found {len(result_df)} items (expanded from: {', '.join(keywords)})",
                    "columns": ["id", "node_type", "ontology_class", "confidence", "filename"]
                }
            else:
                return {
                    "type": "suggestions",
                    "data": [
                        "Try 'database statistics' to see available data",
                        "Try 'show recent documents' to see processed files",
                        "Try specific terms like 'temperature', 'pressure', 'pump'"
                    ],
                    "message": "No matches found. Suggestions:"
                }
        
        except Exception as e:
            print(f"❌ Enhanced database fallback error: {e}")
            return {
                "type": "error",
                "message": f"Enhanced database search failed: {str(e)}"
            }

# 글로벌 변수 (데이터베이스 통합)
ontology_learner = AdvancedOntologyLearner()
db_manager = DatabaseManager()
query_processor = NaturalLanguageQueryProcessor(ontology_learner, db_manager)
graph_data_store = {}


# Dash 앱 생성
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

app.layout = dbc.Container([
    html.H1("🏭 Industrial Knowledge Graph Analyzer", className="text-primary mb-4"),
    
    dbc.Row([
        # 왼쪽 패널
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    html.H5("📄 Document Upload"),
                    dcc.Upload(
                        id="upload-pdf",
                        children=html.Div([
                            "Drag and drop PDF files or ",
                            html.A("click to select", style={"color": "#007bff"})
                        ]),
                        style={
                            'width': '100%',
                            'height': '60px',
                            'lineHeight': '60px',
                            'borderWidth': '2px',
                            'borderStyle': 'dashed',
                            'borderRadius': '5px',
                            'textAlign': 'center',
                            'backgroundColor': '#f8f9fa'
                        },
                        multiple=False
                    )
                ])
            ], className="mb-3"),
            
            dbc.Card([
                dbc.CardBody([
                    html.H5("🎯 Quick Actions"),
                    dbc.Button("🧪 Test Connection", id="test-btn", color="secondary", className="w-100 mb-2", size="sm"),
                    dbc.Button("📊 Load Sample Data", id="sample-btn", color="info", className="w-100 mb-2", size="sm"),
                    dbc.Button("🔄 Update Charts", id="update-btn", color="warning", className="w-100 mb-2", size="sm"),
                ])
            ], className="mb-4"),
            
            html.Div(id="status-output", className="mb-4"),
            
            dbc.Card([
                dbc.CardBody([
                    html.H6("📈 System Info"),
                    html.P("✅ Ontology Classes: 7", className="mb-1"),
                    html.P("✅ Object Properties: 7", className="mb-1"),
                    html.P("✅ Datatype Properties: 6", className="mb-1"),
                    html.P("🧠 Advanced Learning: Enabled", className="mb-1"),
                    html.P("💾 Database: Connected", className="mb-0"),
                ])
            ]),
            
            # 학습 통계 카드 추가
            html.Div(id="learning-stats", className="mt-3")
        ], width=4),
        
        # 오른쪽 패널
        dbc.Col([
            # 자연어 쿼리 인터페이스 추가
            dbc.Card([
                dbc.CardBody([
                    html.H5("🗣️ Natural Language Query"),
                    dbc.InputGroup([
                        dbc.Input(
                            id="nl-query-input",
                            placeholder="e.g., 'show all equipment with high confidence', 'database statistics', 'search for pump'",
                            type="text"
                        ),
                        dbc.Button("🔍 Query", id="query-btn", color="primary")
                    ]),
                    html.Div(id="query-output", className="mt-3")
                ])
            ], className="mb-4"),
            
            html.H4("📊 Node Classification"),
            dcc.Graph(id="pie-chart", style={'height': '400px'}),
            
            html.Hr(),
            
            html.H4("🕸️ Knowledge Graph"),
            dcc.Graph(id="network-graph", style={'height': '500px'})
        ], width=8)
    ]),
    
    # 숨겨진 데이터 저장소
    dcc.Store(id="data-store", data={})
], fluid=True)


# 콜백들
@app.callback(
    [Output("status-output", "children"), Output("data-store", "data")],
    [Input("test-btn", "n_clicks"), Input("sample-btn", "n_clicks"), Input("upload-pdf", "contents")],
    [State("upload-pdf", "filename")],
    prevent_initial_call=True
)

def handle_all_inputs(test_clicks, sample_clicks, pdf_contents, pdf_filename):
    global db_manager
    from dash import ctx
    
    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0] if ctx.triggered else None
    print(f"🔥 Input callback triggered: {trigger_id}")
    
    if trigger_id == "test-btn":
        print("✅ Test button clicked")
        return dbc.Alert("✅ Connection test successful! Database ready.", color="success"), {}
    
    elif trigger_id == "sample-btn":
        print("📊 Sample button clicked - generating data...")
        
        G, node_features, predictions = create_sample_graph()
        
        graph_data = {
            "nodes": [{"id": node, **node_features[node]} for node in G.nodes()],
            "edges": [{"source": u, "target": v, "relation": data.get("relation", "unknown")} 
                     for u, v, data in G.edges(data=True)],
            "predictions": predictions,
            "stats": {
                "total_nodes": G.number_of_nodes(),
                "total_edges": G.number_of_edges(),
                "source": "sample"
            }
        }
        
        print(f"✅ Sample data created: {G.number_of_nodes()} nodes, {G.number_of_edges()} edges")
        
        message = dbc.Alert([
            html.H5("✅ Sample data loaded!", className="alert-heading"),
            html.P(f"Created {G.number_of_nodes()} nodes and {G.number_of_edges()} edges"),
            html.P("Click 'Update Charts' to see visualizations!")
        ], color="success")
        
        return message, graph_data
    
    elif trigger_id == "upload-pdf" and pdf_contents:
        print(f"📄 PDF uploaded: {pdf_filename}")
        
        try:
            if not pdf_filename or not pdf_filename.lower().endswith('.pdf'):
                return dbc.Alert("❌ Please select a PDF file", color="warning"), {}
            
            content_type, content_string = pdf_contents.split(',')
            decoded = base64.b64decode(content_string)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                tmp_file.write(decoded)
                tmp_file_path = tmp_file.name
            
            try:
                # PDF 텍스트 추출
                pdf_text = extract_pdf_text(tmp_file_path)
                print(f"📝 Extracted {len(pdf_text)} characters from PDF")
                
                if len(pdf_text.strip()) < 10:
                    return dbc.Alert("❌ No meaningful text found in PDF", color="warning"), {}
                
                # 그래프 생성 (향상된 버전)
                import time
                start_time = time.time()
                
                G, node_features, predictions, learning_results = process_pdf_to_graph(pdf_text, pdf_filename)
                
                # 그래프 데이터 구성
                graph_data = {
                    "nodes": [{"id": node, **node_features[node]} for node in G.nodes()],
                    "edges": [{"source": u, "target": v, "relation": data.get("relation", "unknown")} 
                             for u, v, data in G.edges(data=True)],
                    "predictions": predictions,
                    "learning_results": learning_results,
                    "stats": {
                        "total_nodes": G.number_of_nodes(),
                        "total_edges": G.number_of_edges(),
                        "source": "pdf",
                        "filename": pdf_filename,
                        "text_length": len(pdf_text),
                        "patterns_found": len(learning_results.get("patterns", {})),
                        "entities_found": sum(len(v) for v in learning_results.get("new_entities", {}).values()),
                        "relations_found": len(learning_results.get("new_relations", [])),
                        "avg_confidence": sum(learning_results.get("confidence_scores", {}).values()) / 
                                        max(len(learning_results.get("confidence_scores", {})), 1),
                        "domain_insights": learning_results.get("domain_insights", {})
                    }
                }
                
                # 데이터베이스에 저장
                doc_id = db_manager.save_processing_results(
                pdf_filename, pdf_text, graph_data, learning_results, 
                processing_time=0,
                )
                
                print(f"✅ PDF processed and saved to database: {G.number_of_nodes()} nodes, {G.number_of_edges()} edges")
                
                # 상세한 성공 메시지
                stats = graph_data["stats"]
                domain_insights = stats.get("domain_insights", {})
                
                message = dbc.Alert([
                    html.H5(f"✅ PDF '{pdf_filename}' processed with advanced ontology learning!", className="alert-heading"),
                    dbc.Row([
                        dbc.Col([
                            html.P(f"📊 Text: {stats['text_length']} characters", className="mb-1"),
                            html.P(f"🎯 Patterns: {stats['patterns_found']} types", className="mb-1"),
                            html.P(f"🏷️ Entities: {stats['entities_found']} found", className="mb-1"),
                        ], width=6),
                        dbc.Col([
                            html.P(f"🔗 Relations: {stats['relations_found']} identified", className="mb-1"),
                            html.P(f"🕸️ Graph: {stats['total_nodes']} nodes, {stats['total_edges']} edges", className="mb-1"),
                            html.P(f"🎖️ Confidence: {stats['avg_confidence']:.2f}", className="mb-1"),
                        ], width=6),
                    ]),
                    html.Hr(),
                    html.P([
                        "🧠 Domain: ", 
                        html.Strong(domain_insights.get("industry_domain", "Unknown")),
                        f" | Complexity: {domain_insights.get('complexity_score', 0):.1f}/5.0",
                        f" | DB ID: {doc_id}" if doc_id else ""
                    ], className="mb-2"),
                    html.P("💾 Results saved to database! Try querying: 'database statistics' or 'show recent documents'", className="mb-0")
                ], color="success")
                
                return message, graph_data
                
            finally:
                if os.path.exists(tmp_file_path):
                    os.unlink(tmp_file_path)
        
        except Exception as e:
            print(f"❌ PDF processing error: {e}")
            return dbc.Alert(f"❌ Error processing PDF: {str(e)}", color="danger"), {}
    
    return "", {}

@app.callback(
    Output("pie-chart", "figure"),
    [Input("update-btn", "n_clicks")],
    [State("data-store", "data")]
)
def update_pie_chart(n_clicks, stored_data):
    print(f"🎯 Pie chart callback - clicks: {n_clicks}, data: {bool(stored_data)}")
    
    if n_clicks and stored_data and "predictions" in stored_data:
        predictions = stored_data["predictions"]
        pred_counts = Counter(predictions)
        
        labels = ["Class", "Entity", "Literal"]
        values = [pred_counts.get(i, 0) for i in range(3)]
        colors = ["#ff9999", "#66b3ff", "#99ff99"]
        
        fig = go.Figure()
        fig.add_trace(go.Pie(
            labels=labels,
            values=values,
            hole=0.3,
            textinfo="label+percent+value",
            marker=dict(colors=colors)
        ))
        
        fig.update_layout(
            title=f"Node Classification Results (Total: {sum(values)})",
            height=400,
            showlegend=True
        )
        
        print(f"✅ Pie chart created: {values}")
        return fig
    
    return go.Figure().add_annotation(
        text="Load sample data or upload PDF, then click 'Update Charts'",
        showarrow=False, x=0.5, y=0.5
    )

@app.callback(
    Output("network-graph", "figure"),
    [Input("update-btn", "n_clicks")],
    [State("data-store", "data")]
)
def update_network_graph(n_clicks, stored_data):
    print(f"🕸️ Network graph callback - clicks: {n_clicks}, data: {bool(stored_data)}")
    
    if n_clicks and stored_data and "nodes" in stored_data:
        nodes = stored_data["nodes"]
        edges = stored_data["edges"]
        
        G = nx.DiGraph()
        for node in nodes:
            G.add_node(node["id"])
        for edge in edges:
            G.add_edge(edge["source"], edge["target"])
        
        pos = nx.spring_layout(G, k=2, iterations=50)
        
        edge_x, edge_y = [], []
        for edge in G.edges():
            x0, y0 = pos[edge[0]]
            x1, y1 = pos[edge[1]]
            edge_x.extend([x0, x1, None])
            edge_y.extend([y0, y1, None])
        
        node_x = [pos[node][0] for node in G.nodes()]
        node_y = [pos[node][1] for node in G.nodes()]
        node_text = [node[:15] + "..." if len(node) > 15 else node for node in G.nodes()]
        
        # 노드 색상 및 크기 (신뢰도 기반)
        node_colors = []
        node_sizes = []
        hover_text = []
        
        for node in G.nodes():
            node_info = next((n for n in nodes if n["id"] == node), {})
            confidence = node_info.get("confidence", 0.5)
            node_type = node_info.get("type", "unknown")
            ontology_class = node_info.get("ontology_class", "Unknown")
            
            # 신뢰도에 따른 크기
            node_sizes.append(15 + confidence * 25)
            
            # 타입에 따른 색상
            if node_type == "entity":
                base_color = [70, 130, 180]  # 스틸블루
            elif node_type == "literal":
                base_color = [60, 179, 113]  # 미디엄씨그린
            else:
                base_color = [255, 99, 71]   # 토마토
            
            # 신뢰도에 따른 투명도
            alpha = 0.4 + confidence * 0.6
            color = f"rgba({base_color[0]}, {base_color[1]}, {base_color[2]}, {alpha})"
            node_colors.append(color)
            
            # 호버 텍스트
            hover_text.append(
                f"<b>{node}</b><br>" +
                f"Type: {node_type}<br>" +
                f"Class: {ontology_class}<br>" +
                f"Confidence: {confidence:.3f}"
            )
        
        fig = go.Figure()
        
        # 엣지 추가
        fig.add_trace(go.Scatter(
            x=edge_x, y=edge_y,
            line=dict(width=1.5, color='rgba(125,125,125,0.5)'),
            mode='lines',
            showlegend=False,
            hoverinfo='none'
        ))
        
        # 노드 추가 (신뢰도 기반 시각화)
        fig.add_trace(go.Scatter(
            x=node_x, y=node_y,
            mode='markers+text',
            text=node_text,
            textposition="middle center",
            textfont=dict(size=8, color="white"),
            marker=dict(
                size=node_sizes,
                color=node_colors,
                line=dict(width=1, color='rgba(50,50,50,0.8)')
            ),
            showlegend=False,
            hoverinfo='text',
            hovertext=hover_text
        ))
        
        fig.update_layout(
            title=f"Advanced Knowledge Graph ({G.number_of_nodes()} nodes, {G.number_of_edges()} edges)<br><sub>Node size = confidence, Color = type (Blue=Entity, Green=Literal, Red=Other)</sub>",
            height=500,
            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
            showlegend=False,
            plot_bgcolor='rgba(240,240,240,0.2)',
            margin=dict(l=20, r=20, t=80, b=20)
        )
        
        print(f"✅ Enhanced network graph created: {G.number_of_nodes()} nodes")
        return fig
    
    return go.Figure().add_annotation(
        text="Load sample data or upload PDF, then click 'Update Charts'",
        showarrow=False, x=0.5, y=0.5
    )

@app.callback(
    Output("learning-stats", "children"),
    [Input("data-store", "data")]
)
def update_learning_stats(stored_data):
    """온톨로지 학습 통계 표시"""
    if not stored_data or "learning_results" not in stored_data:
        return ""
    
    learning_results = stored_data["learning_results"]
    stats = stored_data.get("stats", {})
    
    confidence_scores = learning_results.get("confidence_scores", {})
    domain_insights = learning_results.get("domain_insights", {})
    
    if not confidence_scores and not domain_insights:
        return ""
    
    # 신뢰도 분포
    high_conf = sum(1 for c in confidence_scores.values() if c > 0.8)
    med_conf = sum(1 for c in confidence_scores.values() if 0.5 < c <= 0.8)
    low_conf = sum(1 for c in confidence_scores.values() if c <= 0.5)
    
    return dbc.Card([
        dbc.CardBody([
            html.H6("🧠 Learning Analytics", className="card-title"),
            html.P(f"🎖️ High Confidence: {high_conf}", className="mb-1"),
            html.P(f"🏃 Medium Confidence: {med_conf}", className="mb-1"),
            html.P(f"🤔 Low Confidence: {low_conf}", className="mb-1"),
            html.Hr(className="my-2"),
            html.P(f"📈 Technical Density: {domain_insights.get('technical_density', 0):.3f}", className="mb-1"),
            html.P(f"🔬 Document Type: {domain_insights.get('document_type', 'Unknown')}", className="mb-0"),
        ])
    ], className="border-info")

@app.callback(
    Output("query-output", "children"),
    [Input("query-btn", "n_clicks")],
    [State("nl-query-input", "value"), State("data-store", "data")]
)
def handle_natural_language_query(n_clicks, query_text, stored_data):
    """자연어 쿼리 처리 (데이터베이스 통합)"""
    if not n_clicks or not query_text:
        return html.Div([
            html.P("💡 Query Examples:", className="mb-2 font-weight-bold"),
            html.Ul([
                html.Li("database statistics"),
                html.Li("show recent documents"),
                html.Li("search for equipment"),
                html.Li("show all entities with high confidence"),
                html.Li("count all nodes"),
                html.Li("show relationships")
            ], className="mb-0")
        ])
    
    print(f"🗣️ Natural language query: '{query_text}'")
    
    try:
        # 쿼리 처리 (데이터베이스 우선)
        result = query_processor.process_query(query_text, stored_data)
        
        # 결과 렌더링
        return render_query_result(result)
        
    except Exception as e:
        print(f"❌ Query processing error: {e}")
        return dbc.Alert(f"❌ Error processing query: {str(e)}", color="danger")

def render_query_result(result):
    """쿼리 결과를 렌더링"""
    result_type = result.get("type", "error")
    message = result.get("message", "")
    data = result.get("data", [])
    
    components = [
        html.P(f"✅ {message}", className="text-success font-weight-bold mb-3")
    ]
    
    if result_type == "table" and data:
        # 테이블 형태로 결과 표시
        columns = result.get("columns", [])
        if not columns and data:
            columns = list(data[0].keys()) if data else []
        
        # 데이터 정리 (소수점 반올림)
        clean_data = []
        for item in data[:20]:  # 최대 20개만 표시
            clean_item = {}
            for key, value in item.items():
                if isinstance(value, float):
                    clean_item[key] = round(value, 3)
                else:
                    clean_item[key] = str(value)[:50]  # 길이 제한
            clean_data.append(clean_item)
        
        if clean_data:
            df = pd.DataFrame(clean_data)
            table = dbc.Table.from_dataframe(
                df, 
                striped=True, 
                bordered=True, 
                hover=True, 
                responsive=True,
                size="sm"
            )
            components.append(table)
            
            if len(data) > 20:
                components.append(
                    html.P(f"... and {len(data) - 20} more items", className="text-muted")
                )
    
    elif result_type == "stat" and data:
        # 통계 형태로 결과 표시
        stat_cards = []
        for key, value in data.items():
            stat_cards.append(
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H5(str(value), className="text-primary"),
                            html.P(key, className="mb-0")
                        ])
                    ], className="text-center")
                ], width=3)
            )
        
        components.append(dbc.Row(stat_cards[:4]))  # 최대 4개씩
        
        if len(stat_cards) > 4:
            components.append(dbc.Row(stat_cards[4:8], className="mt-2"))
    
    elif result_type == "suggestions" and data:
        # 제안사항 표시
        components.extend([
            html.P("💡 Try these queries:", className="font-weight-bold"),
            html.Ul([html.Li(suggestion) for suggestion in data])
        ])
    
    elif result_type == "error":
        components = [dbc.Alert(f"❌ {message}", color="danger")]
    
    else:
        components.append(html.P("No results found."))
    
    return html.Div(components)

if __name__ == "__main__":
    print("🚀 Starting Advanced Industrial Knowledge Graph Analyzer...")
    print("🧠 Enhanced ontology learning enabled!")
    print("💾 Database system integrated!")
    print("🔍 Natural language queries supported!")
    print("🌐 Open http://127.0.0.1:8050 in your browser")
    
    app.run(debug=True, port=8050)

    